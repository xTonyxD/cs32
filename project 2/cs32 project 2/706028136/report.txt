Tony Wang
706028136


Honestly, this was a relatively straightforward project. Not too many issues. The most significant was trying to find out how to use recursion for the last method in a way that wouldn’t just recurse once and immediately exit. I realized that division is pretty much repeated subtraction. Boom, iteration of sorts. So my method ended up just keep trying to subtract one number from the other. The exit condition was the numbers being equal, which would only ever happen when they’re multiples, or when the ‘polarity’ of the two numbers flipped; i.e. if a>b before the function and b>a after the function, I’d call that a polarity change and exit.


Test Data:
isPowerOfFour()
1. cout << "test 16: " << isPowerOfFour(16) << endl; TRUE
   1. standard test case, test if program compiles and runs and doesn’t explode from a stack overflow
2. cout << "test 324: " << isPowerOfFour(324) << endl; FALSE
   1. random number i thought of that’s big and even, tests basic false condition
3. cout << "test 1: " << isPowerOfFour(1) << endl; TRUE
   1. edge case
4. cout << "test 0: " << isPowerOfFour(0) << endl; TRUE
   1. edge case (also needed to be TRUE as per Professor’s decree)
5. cout << "test 12: " << isPowerOfFour(12) << endl; FALSE
   1. also tests basic false condition but off of 1 iteration not many
6. cout << "test 28: " << isPowerOfFour(28) << endl; FALSE
   1. tests basic false condition again
7. cout << "test 19: " << isPowerOfFour(19) << endl; FALSE
   1. another false condition test, somewhat close to a true case
8. cout << "test -16: " << isPowerOfFour(-16) << endl; FALSE
   1. tests negative numbers false-ness overrides the true-ness of being a power of 4
9. cout << "test -28: " << isPowerOfFour(-28) << endl; FALSE
   1. tests negative numbers in general
10. cout << "test 4^4: " << isPowerOfFour(4*4*4*4) << endl; TRUE
   1. tests true condition after several iterations


1. cout << "test 11: " << count11s("11") << endl; 1
   1. basic compile/run/stack overflow test case
2. cout << "test 1111: " << count11s("1111") << endl; 2
   1. basic test case pt 2
3. cout << "test 11111: " << count11s("11111") << endl; 2
   1. tests if it counts 11s like the project spec says it should
4. cout << "test 11assdaf11: " << count11s("11assdaf11") << endl; 2
   1. beginning/end case
5. cout << "test 1d1d1d1d1d: " << count11s("1d1d1d1d1d") << endl; 0
   1. false case
6. cout << "test 11dasdf11das11: " << count11s("11dasdf11das11") << endl; 3
   1. random 11 in the middle of nowhere
7. cout << "test asdfasf11sfaad: " << count11s("asdfasf11sfaad") << endl; 1
   1. another random 11 in the middle of nowhere
8. cout << "test 114143141411114144431: " << count11s("114143141411114144431") << endl; 3
   1. lots of 1’s
9. cout << "test 1: " << count11s("1") << endl; 0
   1. singular 1 edge case
10. cout << "test empty string: " << count11s("") << endl; 0
   1. another edge case


1. cout << "test xx: " << changexy("xx") << endl; yy
   1. basic compile/run/overflow test case
2. cout << "test yy: " << changexy("yy") << endl; yy
   1. mistaken detection test case
3. cout << "test asdgajlksdsjkxdzlkxcjdbfagdkflfsdnjfdb: " << changexy("asdgajlksdsjkxdzlkxcjdbfagdkflfsdnjfdb") << endl; asdgajlksdsjkydzlkycjdbfagdkflfsdnjfdb
   1. stinky 
4. cout << "test xxxxxxxxxxxxxxxxxxxxxxxxxxxxx: " << changexy("xxxxxxxxxxxxxxxxxxxxxxxxxxxxx") << endl; yyyyyyyyyyyyyyyyyyyyyyyyyyyyy
   1. um, the case where theres a lot of things to change
5. cout << "test empty string: " << changexy("") << endl;
   1. empty string edge case
6. cout << "test x: " << changexy("x") << endl; y
   1. 1 value edge case
7. cout << "test asdlkmxzlcxdadslkxklclosiadskxlsdojixckdsxlkdfakslx: " << changexy("asdlkmxzlcxdadslkxklclosiadskxlsdojixckdsxlkdfakslx") << endl; asdlkmyzlcydadslkyklclosiadskylsdojiyckdsylkdfaksly
   1. just like, a lot of things
8. cout << "test xx x x  x xxxxxddsafkdxdx xdxd ddx : " << changexy("xx x x  x xxxxxddsafkdxdx xdxd ddx ") << endl; yy y y  y yyyyyddsafkdydy ydyd ddy
   1. spaces (shouldn’t change anything but just in case


1. cout << "test 5, 25: " << multiplesOfOneAnother(5, 25) << endl; TRUE
   1. normal ass case where b>a
2. cout << "test 100, 25: " << multiplesOfOneAnother(100, 25) << endl; TRUE
   1. normal case where a>b
3. cout << "test 3, 25: " << multiplesOfOneAnother(3, 25) << endl; FALSE
   1. checks the fail condition is functional
4. cout << "test 3, 19: " << multiplesOfOneAnother(3, 19) << endl; FALSE
   1. checks when both are prime
5. cout << "test 25, 3: " << multiplesOfOneAnother(25, 3) << endl;  FALSE
   1. checks the fail condition is functional no matter what order u put things in
6. cout << "test 1341, 12: " << multiplesOfOneAnother(1341, 12) << endl; FALSE
   1. checks the fail condition for big number
7. cout << "test 5, 5: " << multiplesOfOneAnother(5, 5) << endl; TRUE
   1. checks success condition for 0 iterations
8. cout << "test 15, 4: " << multiplesOfOneAnother(15, 4) << endl; FALSE
   1. tests generic fail condition
9. cout << "test 5, 4: " << multiplesOfOneAnother(5, 4) << endl; FALSE
   1. more generic fail condition after 1 iteration
10. cout << "test 4, 5: " << multiplesOfOneAnother(4, 5) << endl; FALSE
   1. same as above just flipped parameters to check that order doesn’t matter
11. cout << "test 0, 0: " << multiplesOfOneAnother(0, 0) << endl; FALSE
   1. 0 input fringe case
12. cout << "test 0, 5: " << multiplesOfOneAnother(0, 5) << endl; FALSE
   1. 0 input fringe case pt 2
13. cout << "test 4, 0: " << multiplesOfOneAnother(4, 0) << endl; FALSE
   1. 0 input fringe case pt 3
14. cout << "test 318, 317: " << multiplesOfOneAnother(318, 317) << endl; FALSE
   1. fringe case where numbers are 1 off